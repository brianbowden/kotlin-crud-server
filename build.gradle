import groovy.xml.MarkupBuilder
import javax.xml.bind.JAXB

buildscript {
    ext.kotlin_version = '1.1.51'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'mysql:mysql-connector-java:5.1.6'
        classpath 'org.jooq:jooq-codegen:3.10.0'
    }
}

plugins {
    id 'org.liquibase.gradle' version '1.2.4'
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

// Rather than being contained in a Kotlin class, our main(..) method resides at the package level.
// At compile time, Kotlin puts methods at the package level into compile-time classes named based on
// the method's containing file (in this case, Main.kt).
mainClassName = "com.peak.prototype.MainKt"

// In this section you declare the dependencies for your production and test code
dependencies {
    // SLF4J Logging API with Simple implementation
    compile 'org.slf4j:slf4j-simple:1.7.12'

    // Spark Java (not to be confused with Apache Spark, the data science library)
    compile "com.sparkjava:spark-core:2.6.0"
    // Spark Java (Kotlin DSLs); this is not necessary for use with Kotlin, but it makes it cleaner
    compile "com.sparkjava:spark-kotlin:1.0.0-alpha"

    // Moshi is a JSON serializer/deserializer
    compile 'com.squareup.moshi:moshi-kotlin:1.5.0'

    // JOOQ, the SQL builder / ORM
    compile 'org.jooq:jooq:3.10.0'
    compile 'org.jooq:jooq-meta:3.10.0'
    compile 'org.jooq:jooq-codegen:3.10.0'

    // MySQL driver
    compile 'mysql:mysql-connector-java:5.1.6'

    // Kotlin Standard Library
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Declare the dependency for your favourite test framework you want to use in your tests.
    testCompile 'junit:junit:4.12'
}

liquibase {
    activities {
        main {
            changeLogFile 'db/masterChangeLog.xml'
            url System.getenv("PEAK_DB_URL")
            username System.getenv("PEAK_DB_USER")
            password System.getenv("PEAK_DB_PASS")
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.peak.prototype.MainKt'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

run {
    if (project.hasProperty("runArgs")) {
        args Eval.me(runArgs)
    }
}

task('generateDbCode') {
    // Configuration xml generators
    def configWriter = new StringWriter()
    def xml = new MarkupBuilder(configWriter)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.10.0.xsd') {
        jdbc() {
            driver('com.mysql.jdbc.Driver')
            url(System.getenv("PEAK_DB_URL"))
            user(System.getenv("PEAK_DB_USER"))
            password(System.getenv("PEAK_DB_PASS"))
        }
        generator() {
            strategy() {
                delegate.invokeMethod('name', 'com.peak.prototype.db.PeakGenStrategy')
            }

            database() {
                name('org.jooq.util.mysql.MySQLDatabase')
                includes('.*')
                excludes('.*DATABASECHANGE.*')
                inputSchema('peak_proto_dev')
            }

            // Watch out for this caveat when using MarkupBuilder with "reserved names"
            // - https://github.com/jOOQ/jOOQ/issues/4797
            // - http://stackoverflow.com/a/11389034/521799
            // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
            generate([:]) {
                pojos false
                daos false
                records true
            }
            target() {
                packageName('com.peak.prototype.gen')
                directory('src/main/java')
            }
        }
    }

    org.jooq.util.GenerationTool.generate(
            JAXB.unmarshal(
                    new StringReader(configWriter.toString()),
                    org.jooq.util.jaxb.Configuration.class)
    )
}
